note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class PA_STREAM_INFO_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	structversion: INTEGER
			-- Access member `structVersion`
		require
			exists: exists
		do
			Result := c_structversion (item)
		ensure
			result_correct: Result = c_structversion (item)
		end

	set_structversion (a_value: INTEGER) 
			-- Change the value of member `structVersion` to `a_value`.
		require
			exists: exists
		do
			set_c_structversion (item, a_value)
		ensure
			structversion_set: a_value = structversion
		end

	inputlatency: REAL_64
			-- Access member `inputLatency`
		require
			exists: exists
		do
			Result := c_inputlatency (item)
		ensure
			result_correct: Result = c_inputlatency (item)
		end

	set_inputlatency (a_value: REAL_64) 
			-- Change the value of member `inputLatency` to `a_value`.
		require
			exists: exists
		do
			set_c_inputlatency (item, a_value)
		ensure
			inputlatency_set: a_value = inputlatency
		end

	outputlatency: REAL_64
			-- Access member `outputLatency`
		require
			exists: exists
		do
			Result := c_outputlatency (item)
		ensure
			result_correct: Result = c_outputlatency (item)
		end

	set_outputlatency (a_value: REAL_64) 
			-- Change the value of member `outputLatency` to `a_value`.
		require
			exists: exists
		do
			set_c_outputlatency (item, a_value)
		ensure
			outputlatency_set: a_value = outputlatency
		end

	samplerate: REAL_64
			-- Access member `sampleRate`
		require
			exists: exists
		do
			Result := c_samplerate (item)
		ensure
			result_correct: Result = c_samplerate (item)
		end

	set_samplerate (a_value: REAL_64) 
			-- Change the value of member `sampleRate` to `a_value`.
		require
			exists: exists
		do
			set_c_samplerate (item, a_value)
		ensure
			samplerate_set: a_value = samplerate
		end

feature {NONE} -- Implementation wrapper for struct struct PaStreamInfo

	sizeof_external: INTEGER 
		external
			"C inline use <portaudio.h>"
		alias
			"sizeof(struct PaStreamInfo)"
		end

	c_structversion (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaStreamInfo*)$an_item)->structVersion
			]"
		end

	set_c_structversion (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaStreamInfo*)$an_item)->structVersion =  (int)$a_value
			]"
		ensure
			structversion_set: a_value = c_structversion (an_item)
		end

	c_inputlatency (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaStreamInfo*)$an_item)->inputLatency
			]"
		end

	set_c_inputlatency (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaStreamInfo*)$an_item)->inputLatency =  (PaTime)$a_value
			]"
		ensure
			inputlatency_set: a_value = c_inputlatency (an_item)
		end

	c_outputlatency (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaStreamInfo*)$an_item)->outputLatency
			]"
		end

	set_c_outputlatency (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaStreamInfo*)$an_item)->outputLatency =  (PaTime)$a_value
			]"
		ensure
			outputlatency_set: a_value = c_outputlatency (an_item)
		end

	c_samplerate (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaStreamInfo*)$an_item)->sampleRate
			]"
		end

	set_c_samplerate (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaStreamInfo*)$an_item)->sampleRate =  (double)$a_value
			]"
		ensure
			samplerate_set: a_value = c_samplerate (an_item)
		end

end
