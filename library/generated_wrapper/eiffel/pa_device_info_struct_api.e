note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class PA_DEVICE_INFO_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	structversion: INTEGER
			-- Access member `structVersion`
		require
			exists: exists
		do
			Result := c_structversion (item)
		ensure
			result_correct: Result = c_structversion (item)
		end

	set_structversion (a_value: INTEGER) 
			-- Change the value of member `structVersion` to `a_value`.
		require
			exists: exists
		do
			set_c_structversion (item, a_value)
		ensure
			structversion_set: a_value = structversion
		end

	name:  detachable C_STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: C_STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, a_value.item )
		end

	hostapi: INTEGER
			-- Access member `hostApi`
		require
			exists: exists
		do
			Result := c_hostapi (item)
		ensure
			result_correct: Result = c_hostapi (item)
		end

	set_hostapi (a_value: INTEGER) 
			-- Change the value of member `hostApi` to `a_value`.
		require
			exists: exists
		do
			set_c_hostapi (item, a_value)
		ensure
			hostapi_set: a_value = hostapi
		end

	maxinputchannels: INTEGER
			-- Access member `maxInputChannels`
		require
			exists: exists
		do
			Result := c_maxinputchannels (item)
		ensure
			result_correct: Result = c_maxinputchannels (item)
		end

	set_maxinputchannels (a_value: INTEGER) 
			-- Change the value of member `maxInputChannels` to `a_value`.
		require
			exists: exists
		do
			set_c_maxinputchannels (item, a_value)
		ensure
			maxinputchannels_set: a_value = maxinputchannels
		end

	maxoutputchannels: INTEGER
			-- Access member `maxOutputChannels`
		require
			exists: exists
		do
			Result := c_maxoutputchannels (item)
		ensure
			result_correct: Result = c_maxoutputchannels (item)
		end

	set_maxoutputchannels (a_value: INTEGER) 
			-- Change the value of member `maxOutputChannels` to `a_value`.
		require
			exists: exists
		do
			set_c_maxoutputchannels (item, a_value)
		ensure
			maxoutputchannels_set: a_value = maxoutputchannels
		end

	defaultlowinputlatency: REAL_64
			-- Access member `defaultLowInputLatency`
		require
			exists: exists
		do
			Result := c_defaultlowinputlatency (item)
		ensure
			result_correct: Result = c_defaultlowinputlatency (item)
		end

	set_defaultlowinputlatency (a_value: REAL_64) 
			-- Change the value of member `defaultLowInputLatency` to `a_value`.
		require
			exists: exists
		do
			set_c_defaultlowinputlatency (item, a_value)
		ensure
			defaultlowinputlatency_set: a_value = defaultlowinputlatency
		end

	defaultlowoutputlatency: REAL_64
			-- Access member `defaultLowOutputLatency`
		require
			exists: exists
		do
			Result := c_defaultlowoutputlatency (item)
		ensure
			result_correct: Result = c_defaultlowoutputlatency (item)
		end

	set_defaultlowoutputlatency (a_value: REAL_64) 
			-- Change the value of member `defaultLowOutputLatency` to `a_value`.
		require
			exists: exists
		do
			set_c_defaultlowoutputlatency (item, a_value)
		ensure
			defaultlowoutputlatency_set: a_value = defaultlowoutputlatency
		end

	defaulthighinputlatency: REAL_64
			-- Access member `defaultHighInputLatency`
		require
			exists: exists
		do
			Result := c_defaulthighinputlatency (item)
		ensure
			result_correct: Result = c_defaulthighinputlatency (item)
		end

	set_defaulthighinputlatency (a_value: REAL_64) 
			-- Change the value of member `defaultHighInputLatency` to `a_value`.
		require
			exists: exists
		do
			set_c_defaulthighinputlatency (item, a_value)
		ensure
			defaulthighinputlatency_set: a_value = defaulthighinputlatency
		end

	defaulthighoutputlatency: REAL_64
			-- Access member `defaultHighOutputLatency`
		require
			exists: exists
		do
			Result := c_defaulthighoutputlatency (item)
		ensure
			result_correct: Result = c_defaulthighoutputlatency (item)
		end

	set_defaulthighoutputlatency (a_value: REAL_64) 
			-- Change the value of member `defaultHighOutputLatency` to `a_value`.
		require
			exists: exists
		do
			set_c_defaulthighoutputlatency (item, a_value)
		ensure
			defaulthighoutputlatency_set: a_value = defaulthighoutputlatency
		end

	defaultsamplerate: REAL_64
			-- Access member `defaultSampleRate`
		require
			exists: exists
		do
			Result := c_defaultsamplerate (item)
		ensure
			result_correct: Result = c_defaultsamplerate (item)
		end

	set_defaultsamplerate (a_value: REAL_64) 
			-- Change the value of member `defaultSampleRate` to `a_value`.
		require
			exists: exists
		do
			set_c_defaultsamplerate (item, a_value)
		ensure
			defaultsamplerate_set: a_value = defaultsamplerate
		end

feature {NONE} -- Implementation wrapper for struct struct PaDeviceInfo

	sizeof_external: INTEGER 
		external
			"C inline use <portaudio.h>"
		alias
			"sizeof(struct PaDeviceInfo)"
		end

	c_structversion (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->structVersion
			]"
		end

	set_c_structversion (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->structVersion =  (int)$a_value
			]"
		ensure
			structversion_set: a_value = c_structversion (an_item)
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->name =  (char const*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_hostapi (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->hostApi
			]"
		end

	set_c_hostapi (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->hostApi =  (PaHostApiIndex)$a_value
			]"
		ensure
			hostapi_set: a_value = c_hostapi (an_item)
		end

	c_maxinputchannels (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->maxInputChannels
			]"
		end

	set_c_maxinputchannels (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->maxInputChannels =  (int)$a_value
			]"
		ensure
			maxinputchannels_set: a_value = c_maxinputchannels (an_item)
		end

	c_maxoutputchannels (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->maxOutputChannels
			]"
		end

	set_c_maxoutputchannels (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->maxOutputChannels =  (int)$a_value
			]"
		ensure
			maxoutputchannels_set: a_value = c_maxoutputchannels (an_item)
		end

	c_defaultlowinputlatency (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultLowInputLatency
			]"
		end

	set_c_defaultlowinputlatency (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultLowInputLatency =  (PaTime)$a_value
			]"
		ensure
			defaultlowinputlatency_set: a_value = c_defaultlowinputlatency (an_item)
		end

	c_defaultlowoutputlatency (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultLowOutputLatency
			]"
		end

	set_c_defaultlowoutputlatency (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultLowOutputLatency =  (PaTime)$a_value
			]"
		ensure
			defaultlowoutputlatency_set: a_value = c_defaultlowoutputlatency (an_item)
		end

	c_defaulthighinputlatency (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultHighInputLatency
			]"
		end

	set_c_defaulthighinputlatency (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultHighInputLatency =  (PaTime)$a_value
			]"
		ensure
			defaulthighinputlatency_set: a_value = c_defaulthighinputlatency (an_item)
		end

	c_defaulthighoutputlatency (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultHighOutputLatency
			]"
		end

	set_c_defaulthighoutputlatency (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultHighOutputLatency =  (PaTime)$a_value
			]"
		ensure
			defaulthighoutputlatency_set: a_value = c_defaulthighoutputlatency (an_item)
		end

	c_defaultsamplerate (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultSampleRate
			]"
		end

	set_c_defaultsamplerate (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <portaudio.h>"
		alias
			"[
				((struct PaDeviceInfo*)$an_item)->defaultSampleRate =  (double)$a_value
			]"
		ensure
			defaultsamplerate_set: a_value = c_defaultsamplerate (an_item)
		end

end
